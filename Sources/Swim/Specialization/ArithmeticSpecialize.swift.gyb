%{
from type import *
}%

% for pt in pixel_types:
% for dt in signed_data_types:
extension DataContainer where PT ==${pt}, DT == ${dt} {
    public static prefix func -(arg: Self) -> Self {
        return negate(arg: arg)
    }
}

%end
%end

% for pt in pixel_types:
% for dt in int_data_types + fp_data_types:
extension DataContainer where PT == ${pt}, DT == ${dt} {
    public static func +(lhs: Self, rhs: DT) -> Self {
        var ret = lhs
        ret += rhs
        return ret
    }

    public static func +(lhs: DT, rhs: Self) -> Self {
        var ret = rhs
        ret += lhs
        return ret
    }
    
    public static func +=(lhs: inout Self, rhs: DT) {
        addAssign(lhs: &lhs, rhs: rhs)
    }
    
    public static func -(lhs: Self, rhs: DT) -> Self {
        var ret = lhs
        ret -= rhs
        return ret
    }

    public static func -(lhs: DT, rhs: Self) -> Self {
        return subtract(lhs: lhs, rhs: rhs)
    }
    
    public static func -=(lhs: inout Self, rhs: DT) {
        subtractAssign(lhs: &lhs, rhs: rhs)
    }
    
    public static func *(lhs: Self, rhs: DT) -> Self {
        var ret = lhs
        ret *= rhs
        return ret
    }

    public static func *(lhs: DT, rhs: Self) -> Self {
        var ret = rhs
        ret *= lhs
        return ret
    }
    
    public static func *=(lhs: inout Self, rhs: DT) {
        multiplyAssign(lhs: &lhs, rhs: rhs)
    }
    
    public static func /(lhs: Self, rhs: DT) -> Self {
        var ret = lhs
        ret /= rhs
        return ret
    }

    public static func /(lhs: DT, rhs: Self) -> Self {
        return divide(lhs: lhs, rhs: rhs)
    }
    
    public static func /=(lhs: inout Self, rhs: DT) {
        divideAssign(lhs: &lhs, rhs: rhs)
    }
}

% end
% end
