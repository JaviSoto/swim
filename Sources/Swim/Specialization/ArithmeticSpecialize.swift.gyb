%{
from type import *
}%

% for pt in pixel_types:
% for dt in data_types:
extension Image where P == ${pt}, T == ${dt} {
    public static func +(lhs: Image<P, T>, rhs: T) -> Image<P, T> {
        var ret = lhs
        ret += rhs
        return ret
    }
    
    public static func +=(lhs: inout Image<P, T>, rhs: T) {
        add(lhs: &lhs, rhs: rhs)
    }
    
    public static func -(lhs: Image<P, T>, rhs: T) -> Image<P, T> {
        var ret = lhs
        ret -= rhs
        return ret
    }
    
    public static func -=(lhs: inout Image<P, T>, rhs: T) {
        subtract(lhs: &lhs, rhs: rhs)
    }
    
    public static func *(lhs: Image<P, T>, rhs: T) -> Image<P, T> {
        var ret = lhs
        ret *= rhs
        return ret
    }
    
    public static func *=(lhs: inout Image<P, T>, rhs: T) {
        multiply(lhs: &lhs, rhs: rhs)
    }
    
    public static func /(lhs: Image<P, T>, rhs: T) -> Image<P, T> {
        var ret = lhs
        ret /= rhs
        return ret
    }
    
    public static func /=(lhs: inout Image<P, T>, rhs: T) {
        divide(lhs: &lhs, rhs: rhs)
    }
}

% end
% end
