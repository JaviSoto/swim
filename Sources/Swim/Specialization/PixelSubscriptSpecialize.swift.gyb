%{
from type import *
}%

% for dt in bool_data_types + int_data_types + fp_data_types:
extension Image where P == Intensity, T == ${dt} {
    public subscript(x: Int, y: Int) -> T {
        get {
            return getPixel(x: x, y: y)
        }
        set {
            setPixel(x: x, y: y, newValue: newValue)
        }
    }
}

%end
% for pt in pixel_types:
% for dt in bool_data_types + int_data_types + fp_data_types:
extension Image where P == ${pt}, T == ${dt} {
    public subscript(x: Int, y: Int, c: Int) -> T {
        get {
            return getPixel(x: x, y: y, c: c)
        }
        set {
            setPixel(x: x, y: y, c: c, newValue: newValue)
        }
    }

    public subscript(x: Int, y: Int, c: P) -> T {
        get {
            return getPixel(x: x, y: y, c: c.rawValue)
        }
        set {
            setPixel(x: x, y: y, c: c.rawValue, newValue: newValue)
        }
    }
    
    public subscript(x: Int, y: Int) -> Pixel<P, T> {
        get {
            return getPixel(x: x, y: y)
        }
        set {
            setPixel(x: x, y: y, newValue: newValue)
        }
    }
}

% end
% end