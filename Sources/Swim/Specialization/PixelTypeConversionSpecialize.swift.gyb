%{
from .type import *
}%

% for dt in bool_data_types + int_data_types + fp_data_types:
extension Image where P == Intensity, T == ${dt} {
    public func toRGB() -> Image<RGB, T> {
        return _toRGB()
    }
}

% end

% for dt in large_enough_data_types:
extension Image where P == RGB, T == ${dt} {
    public func toBrightness() -> Image<Intensity, T> {
        return _toBrightness()
    }
    
    public func toLuminance() -> Image<Intensity, T> {
        return _toLuminance()
    }
}

% end

% for dt in int_data_types:
extension Image where P == RGBA, T == ${dt} {
    public init(image: Image<RGB, T>, alpha: T) {
        self = imageFromRGB(image: image, alpha: alpha)
    }

    public init(image: Image<RGB, T>) {
        self = imageFromRGB(image: image, alpha: 255)
    }
}

% end

% for dt in fp_data_types:
extension Image where P == RGBA, T == ${dt} {
    public init(image: Image<RGB, T>, alpha: T) {
        self = imageFromRGB(image: image, alpha: alpha)
    }
    
    public init(image: Image<RGB, T>) {
        self = imageFromRGB(image: image, alpha: 1)
    }
}

% end

% for dt in int_data_types:
extension Image where P == ARGB, T == ${dt} {
    public init(image: Image<RGB, T>, alpha: T) {
        self = imageFromRGB(image: image, alpha: alpha)
    }

    public init(image: Image<RGB, T>) {
        self = imageFromRGB(image: image, alpha: 255)
    }
}

% end

% for dt in fp_data_types:
extension Image where P == ARGB, T == ${dt} {
    public init(image: Image<RGB, T>, alpha: T) {
        self = imageFromRGB(image: image, alpha: alpha)
    }
    
    public init(image: Image<RGB, T>) {
        self = imageFromRGB(image: image, alpha: 1)
    }
}

% end


% for dt in bool_data_types + int_data_types + fp_data_types:
extension Image where P == RGB, T == ${dt} {
% for pt in ["RGBA", "ARGB"]:
    public init(image: Image<${pt}, T>) {
        self = imageFromRGBWithAlpha(image: image)
    }

% end
}

% end

% for dt in bool_data_types + int_data_types + fp_data_types:
extension Image where P == RGBA, T == ${dt} {
    public init(image: Image<ARGB, T>) {
        let data = permuteChannels(data: image.data, permutation: [1, 2, 3, 0])
        self.init(width: image.width, height: image.height, data: data)
    }
}

extension Image where P == ARGB, T == ${dt}  {
    public init(image: Image<RGBA, T>) {
        let data = permuteChannels(data: image.data, permutation: [3, 0, 1, 2])
        self.init(width: image.width, height: image.height, data: data)
    }
}

% end