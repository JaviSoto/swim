%{
pixel_types = ["Intensity", "RGB", "RGBA", "ARGB"]
data_types = ["UInt8", "Float", "Double"]
int_data_types = ["UInt8"]
fp_data_types = ["Float", "Double"]
}%

% for dt in data_types:
extension Image where P == Intensity, T == ${dt} {
    public mutating func convert(_ f: (Int, Int, T)->T) {
        self._convert(f)
    }
}

%end

% for pt in pixel_types:
% for dt in data_types:
extension Image where P == ${pt}, T == ${dt} {
% for dt2 in data_types:
    public func converted(_ f: (Int, Int, Pixel<P, T>)->${dt2}) -> Image<Intensity, ${dt2}> {
        return self._converted(f)
    }
% for pt2 in pixel_types:
    public func converted(_ f: (Int, Int, Pixel<P, T>)->Pixel<${pt2}, ${dt2}>) -> Image<${pt2}, ${dt2}> {
        return self._converted(f)
    }
% end

% end
}

% end
% end
